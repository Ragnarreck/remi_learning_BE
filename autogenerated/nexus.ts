/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "./../node_modules/.prisma/client/index"
import type { Context } from "./../graphql/context/index"


declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  BoolFieldUpdateOperationsInput: { // input type
    set?: boolean | null; // Boolean
  }
  StringFieldUpdateOperationsInput: { // input type
    set?: string | null; // String
  }
  TaskCreateInput: { // input type
    content: string; // String!
    finished?: boolean | null; // Boolean
    id?: string | null; // String
    title: string; // String!
  }
  TaskUpdateInput: { // input type
    content?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    finished?: NexusGenInputs['BoolFieldUpdateOperationsInput'] | null; // BoolFieldUpdateOperationsInput
    id?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
    title?: NexusGenInputs['StringFieldUpdateOperationsInput'] | null; // StringFieldUpdateOperationsInput
  }
  TaskWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Mutation: {};
  Query: {};
  Task: prisma.Task;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    bigRedButton: string | null; // String
    createOneTask: NexusGenRootTypes['Task']; // Task!
    deleteById: NexusGenRootTypes['Task'] | null; // Task
    deleteOneTask: NexusGenRootTypes['Task'] | null; // Task
    updateById: NexusGenRootTypes['Task'] | null; // Task
    updateOneTask: NexusGenRootTypes['Task'] | null; // Task
  }
  Query: { // field return type
    getTask: NexusGenRootTypes['Task'] | null; // Task
    getTasks: Array<NexusGenRootTypes['Task'] | null> | null; // [Task]
  }
  Task: { // field return type
    content: string | null; // String
    finished: boolean | null; // Boolean
    id: string | null; // String
    title: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    bigRedButton: 'String'
    createOneTask: 'Task'
    deleteById: 'Task'
    deleteOneTask: 'Task'
    updateById: 'Task'
    updateOneTask: 'Task'
  }
  Query: { // field return type name
    getTask: 'Task'
    getTasks: 'Task'
  }
  Task: { // field return type name
    content: 'String'
    finished: 'Boolean'
    id: 'String'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createOneTask: { // args
      data: NexusGenInputs['TaskCreateInput']; // TaskCreateInput!
    }
    deleteById: { // args
      id: string; // String!
    }
    deleteOneTask: { // args
      where: NexusGenInputs['TaskWhereUniqueInput']; // TaskWhereUniqueInput!
    }
    updateById: { // args
      finished: boolean; // Boolean!
      id: string; // String!
    }
    updateOneTask: { // args
      data: NexusGenInputs['TaskUpdateInput']; // TaskUpdateInput!
      where: NexusGenInputs['TaskWhereUniqueInput']; // TaskWhereUniqueInput!
    }
  }
  Query: {
    getTask: { // args
      id?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: true
    __typename: false
    resolveType: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}