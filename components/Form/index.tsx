import { Form as FormComponent, Field } from "react-final-form";
import { CgClose } from "react-icons/cg";
import { FormApi } from "final-form";
import classNames from "classnames";
import { useMutation } from "urql";

import { ITask } from "interfaces";
import { CreateTaskDocument } from "autogenerated/documents/createTask";

const required = (value: string) => (value ? undefined : "Required*");

const inputFields = [
  { inputName: "title", placeholder: "Enter title" },
  { inputName: "content", placeholder: "Enter content" },
];

export const Form = ({ handleClose }: { handleClose: () => void }) => {
  const [, createMutation] = useMutation(CreateTaskDocument);

  const onSubmit = async (
    { title, content }: Pick<ITask, "title" | "content">,
    { reset }: FormApi<any, Partial<any>>
  ) => {
    try {
      await createMutation({ title, content });
      reset();
      handleClose();
    } catch (err) {
      console.log(err);
    }
  };

  return (
    <FormComponent
      onSubmit={onSubmit}
      subscription={{ submitting: true, pristine: true }}
      render={({ handleSubmit, submitting, pristine }) => (
        <form onSubmit={handleSubmit} className="w-[400px] relative">
          <button
            onClick={handleClose}
            className="absolute top-[-50px] right-[10px]"
          >
            <CgClose />
          </button>
          {inputFields.map(({ inputName, placeholder }) => {
            return (
              <Field
                name={inputName}
                validate={required}
                key={inputName + placeholder}
              >
                {({ input, meta }) => (
                  <div className="flex mb-[15px] justify-center flex-col items-center">
                    <input
                      {...input}
                      placeholder={placeholder}
                      className="w-[170px] p-[6px] border-2 border-[#6477a5]"
                    />
                    <span
                      className={classNames(
                        "visible font-extralight text-[#c61d23]",
                        {
                          invisible: !meta.touched && meta.error,
                          visible: meta.touched && meta.error,
                        }
                      )}
                    >
                      {meta.error}
                    </span>
                  </div>
                )}
              </Field>
            );
          })}
          <div className="flex justify-center pb-[20px]">
            <button
              type="submit"
              disabled={submitting || pristine}
              className="mr-[10px]"
            >
              Create
            </button>
          </div>
        </form>
      )}
    />
  );
};
